import { Theme } from "theme.slint";

export component BootList {
    in-out property <int> listIdx;
    in-out property <int> timeout;
    in-out property <bool> now-booting;
    in property <length> spacing;
    in property <length> itemWidth;
    in property <int> count: 0;

    callback move-right();
    callback move-left();

    move-right => {
        root.listIdx = min(root.listIdx + 1, root.count - 1);
    }

    move-left => {
        root.listIdx = max(root.listIdx - 1, 0);
    }

    forward-focus: focus-scope;
    height: Theme.size-big;
    preferred-width: 100%;

    focus-scope := FocusScope {
        key-pressed(event) => {
            timeout = -1;
            if (event.text == Key.LeftArrow) {
                root.move-left();
                return accept;
            }
            if (event.text == Key.RightArrow) {
                root.move-right();
                return accept;
            }
            if (event.text == Key.Return) {
                root.now-booting = true;
                return accept;
            }
            return accept;
        }
    }

    Timer {
        interval: 1000ms;
        running: true;
        triggered() => {
            if timeout == 0 {
                root.now-booting = true;
            } else if timeout > 0 {
                timeout -= 1;
            }
        }
    }

    swipe := SwipeGestureHandler {
        handle-swipe-left: true;
        handle-swipe-right: true;

        swiped => {
            if self.current-position.x > self.pressed-position.x + root.itemWidth / 2 {
                root.move-left();
            } else if self.current-position.x < self.pressed-position.x - root.itemWidth / 2 {
                root.move-right();
            }
        }

        TouchArea {
            clicked => {
                focus-scope.focus();
            }
            double-clicked => {
                root.now-booting = true;
            }
        }

        Rectangle {
            clip: true;

            Rectangle {
                property <length> viewport-x: ((root.width - Theme.size-big) / 2) - root.listIdx * (root.itemWidth + root.spacing);
                animate viewport-x {
                    duration: Theme.duration-fast;
                    easing: ease-in;
                }
                
                property <length> swipe-offset: 0;
                x: self.viewport-x + swipe-offset;
                width: inner-layout.preferred-width;

                inner-layout := HorizontalLayout {
                    spacing <=> root.spacing;

                    @children
                }
            }
        }
    }
}
