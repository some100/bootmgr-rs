import { TextEdit, LineEdit, StandardButton, Button } from "std-widgets.slint";
import { BootList } from "boot_list.slint";
import { Card } from "card.slint";
import { Theme } from "theme.slint";
import { TitleLabel } from "title_label.slint";
import { Editor } from "editor.slint";

export component Ui inherits Window {
    in-out property <[{ parser: string, image: image }]> images: [
        { parser: "bls", image: @image-url("icons/linux.png") },
        { parser: "fallback", image: @image-url("icons/fallback.png") },
        { parser: "osx", image: @image-url("icons/osx.png") },
        { parser: "shell", image: @image-url("icons/shell.png") },
        { parser: "uki", image: @image-url("icons/linux.png") },
        { parser: "windows", image: @image-url("icons/windows.png") },
        { parser: "special", image: @image-url("icons/special.png") },
    ];
    in-out property <[{ label: string, value: string }]> fields: [
        { label: "title", value: "" },
        { label: "version", value: "" },
        { label: "machine_id", value: "" },
        { label: "sort_key", value: "" },
        { label: "options", value: "" },
        { label: "devicetree", value: "" },
        { label: "architecture", value: "" },
        { label: "efi", value: "" },
    ];
    in-out property <[{ title: string, image: image }]> items;
    in-out property <int> listIdx;
    in-out property <int> timeout;
    in-out property <bool> now_booting;
    in-out property <bool> now_editing;
    in-out property <string> error;

    in-out property <color> fg;
    in-out property <color> bg;
    in-out property <color> highlight_fg;
    in-out property <color> highlight_bg;

    callback display_err(err: string);
    display_err(err) => {
        root.error = err;
        error-popup.show();
    }

    callback display_fatal_err(err: string);
    display_fatal_err(err) => {
        root.error = err;
        fatal-popup.show();
    }

    callback fill_fields(fields: [{ label: string, value: string }]);
    fill_fields(fields) => {
        root.fields = fields;
    }

    pure callback save_changes(fields: [{ label: string, value: string }]);
    pure callback persist_config(idx: int);
    pure callback remove_config(idx: int);

    forward-focus: boot_list;

    default-font-family: Theme.font-family;

    background: bg;

    boot_list := BootList {
        y: (root.height - self.height) / 2;
        height: 100%;
        itemWidth: Theme.size-medium;
        count: root.items.length;
        listIdx <=> root.listIdx;
        spacing: Theme.spacing-medium;
        timeout <=> root.timeout;
        now-booting <=> root.now_booting;
        now-editing <=> root.now_editing;

        for item[index] in root.items : Card {
            is-selected: index == root.listIdx;
            title: item.title;
            image-source: item.image;
            y: (parent.height - self.height) / 2;
            fg: root.fg;
            highlight-bg: root.highlight_bg;
            highlight-fg: root.highlight_fg;
        }
    }

    timeout-label := TitleLabel {
        text: timeout > 0 ? "Booting in \{timeout} seconds" : "";
        x: (root.width - self.width) / 2;
        y: ((root.height - self.height) * (5 / 6));
        font-size: Theme.font-size-medium;
        color: root.fg;
    }

    error-popup := PopupWindow {
        Rectangle {
            background: root.highlight_bg;
            border-radius: Theme.radius-regular;
            error-label := TitleLabel {
                text: "Failed to boot: \{error}.\n\nClick anywhere or press ESC to continue.";
                font-size: Theme.font-size-medium;
                height: 100%;
                width: 100%;
                wrap: word-wrap;
                color: root.highlight_fg;
                vertical-alignment: center;
            }
        }
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        height: root.height / 4;
        width: root.width / 4;
        close-policy: close-on-click;
    }

    fatal-popup := PopupWindow {
        Rectangle {
            background: root.highlight_bg;
            border-radius: Theme.radius-regular;
            fatal-label := TitleLabel {
                text: "Fatal error occurred: \{error}.\n\nPlease press any key to restart.";
                font-size: Theme.font-size-medium;
                height: 100%;
                width: 100%;
                wrap: word-wrap;
                color: root.highlight_fg;
                vertical-alignment: center;
            }
        }
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        height: root.height / 4;
        width: root.width / 4;
        close-policy: no-auto-close;
    }

    editor-popup := Editor {
        highlight-bg: root.highlight_bg;
        highlight-fg: root.highlight_fg;
        
        fields <=> root.fields;
        visible <=> root.now_editing;

        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        height: root.height / 2;
        width: root.width / 2;

        StandardButton {
            kind: close;
            clicked => {
                root.now_editing = false;
            }
        }
        StandardButton {
            kind: apply;
            clicked => {
                root.save-changes(fields);
            }
        }
        Button {
            text: "Save Persistent Config to filesystem";
            clicked => {
                root.persist_config(root.listIdx);
            }
            dialog-button-role: action;
        }
        Button {
            text: "Remove Persistent Config from filesystem";
            clicked => {
                root.remove_config(root.listIdx);
            }
            dialog-button-role: action;
        }
    }
}
